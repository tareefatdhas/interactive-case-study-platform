rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function isTeacher() {
      return isAuthenticated() && !isAnonymous() &&
        get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeacherOfResource(teacherId) {
      return isAuthenticated() && request.auth.uid == teacherId;
    }
    
    // Teachers collection - only teachers can read/write their own data
    match /teachers/{teacherId} {
      allow read: if isOwner(teacherId);
      allow create: if isAuthenticated() && request.auth.uid == teacherId;
      allow update, delete: if isOwner(teacherId);
    }
    
    // Case studies - teachers can manage, students (anonymous) can read
    match /casestudies/{caseStudyId} {
      allow read: if isAuthenticated(); // Both teachers and anonymous students can read
      allow write: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
    }
    
    // Sessions - teachers can manage, students (anonymous) can read and join
    match /sessions/{sessionId} {
      allow read: if isAuthenticated(); // Both teachers and anonymous students can read
      allow write, update: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
    }
    
    // Students - teachers can manage all, anonymous users can create/update their own
    match /students/{studentId} {
      allow read: if isAuthenticated(); // All authenticated users can read
      allow create: if isAuthenticated(); // Anonymous users can create student records
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any student
        isAnonymous() // Anonymous users can update (for their own records)
      );
    }
    
    // Responses - teachers can read all, students can create/read their own
    match /responses/{responseId} {
      allow read: if isAuthenticated(); // All authenticated users can read
      allow create: if isAuthenticated(); // Anonymous users can create responses
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any response
        isAnonymous() // Anonymous users can update their own responses
      );
    }
    
    // Student grades - teachers can read/write, students can read their own
    match /studentGrades/{gradeId} {
      allow read, write: if isTeacher();
      allow read: if isAuthenticated() && 
        resource.data.studentId == request.auth.uid;
    }
    
    // Courses - teachers can manage their courses
    match /courses/{courseId} {
      allow read, write: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
    }
  }
}