rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function isTeacher() {
      return isAuthenticated() && !isAnonymous() &&
        get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeacherOfResource(teacherId) {
      return isAuthenticated() && request.auth.uid == teacherId;
    }
    
    // Teachers collection - only teachers can read/write their own data
    match /teachers/{teacherId} {
      allow read: if isOwner(teacherId);
      allow create: if isAuthenticated() && request.auth.uid == teacherId;
      allow update, delete: if isOwner(teacherId);
    }
    
    // Case studies - teachers can manage, students (anonymous) can read
    match /casestudies/{caseStudyId} {
      allow read: if isAuthenticated(); // Both teachers and anonymous students can read
      allow write: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
    }
    
    // Sessions - teachers can manage, students (anonymous) can read and join
    match /sessions/{sessionId} {
      allow read: if isAuthenticated(); // Both teachers and anonymous students can read
      allow write, update: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
      
      // Allow students to update sessions for joining
      allow update: if isAuthenticated();
    }
    
    // Students - teachers can manage all, anonymous users can create/update their own
    match /students/{studentId} {
      allow read: if isAuthenticated(); // All authenticated users can read
      allow create: if isAuthenticated(); // Anonymous users can create student records
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any student
        isAnonymous() // Anonymous users can update (for their own records)
      );
    }
    
    // Responses - teachers can read all, students can create/read their own
    match /responses/{responseId} {
      allow read: if isAuthenticated(); // All authenticated users can read
      allow create: if isAuthenticated(); // Anonymous users can create responses
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any response
        isAnonymous() // Anonymous users can update their own responses
      );
    }
    
    // Student grades - teachers can read/write, students can read their own
    match /studentGrades/{gradeId} {
      allow read, write: if isTeacher();
      allow read: if isAuthenticated() && 
        resource.data.studentId == request.auth.uid;
    }
    
    // Courses - teachers can manage their courses
    match /courses/{courseId} {
      allow read, write: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId);
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId);
    }
    
    // Highlights - students can manage their own highlights, teachers can read all
    match /highlights/{highlightId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null &&
                       request.resource.data.authorUid == request.auth.uid;
                       
      allow update: if request.auth != null && 
                       resource.data.authorUid == request.auth.uid;
                       
      allow delete: if request.auth != null && 
                       resource.data.authorUid == request.auth.uid;
    }
    
    // Student Progress - students can manage their own progress, teachers can read all
    match /studentProgress/{progressId} {
      allow read: if isAuthenticated(); // All authenticated users can read progress
      allow create: if isAuthenticated(); // Anonymous users can create progress records
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any progress
        (isAnonymous() && resource.data.authorUid == request.auth.uid) // Anonymous users can update their own progress
      );
    }
    
    // Student Overall Progress - students can manage their own overall progress, teachers can read all
    match /studentOverallProgress/{studentId} {
      allow read: if isAuthenticated(); // All authenticated users can read overall progress
      allow create: if isAuthenticated(); // Anonymous users can create overall progress records
      allow update: if isAuthenticated() && (
        isTeacher() || // Teachers can update any overall progress
        (isAnonymous() && resource.data.authorUid == request.auth.uid) // Anonymous users can update their own progress
      );
    }
    
    // Achievements - teachers can manage their own achievements, students can read enabled ones
    match /achievements/{achievementId} {
      allow read: if isAuthenticated(); // All authenticated users can read achievements
      allow create: if isTeacher() && 
        isTeacherOfResource(request.resource.data.teacherId); // Teachers can create their own achievements
      allow update: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId); // Teachers can update their own achievements
      allow delete: if isTeacher() && 
        isTeacherOfResource(resource.data.teacherId); // Teachers can delete their own achievements
    }
    
    // Student Achievements - students can read their own, achievements are created by system
    match /studentAchievements/{studentAchievementId} {
      allow read: if isAuthenticated(); // All authenticated users can read student achievements
      allow create: if isAuthenticated(); // System can create student achievements (via cloud functions or server)
      allow update: if isAuthenticated(); // System can update student achievements for bonus application
    }
  }
}